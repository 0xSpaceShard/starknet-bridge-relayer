/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface StarknetInterface extends utils.Interface {
  functions: {
    "addMessage(bytes32[])": FunctionFragment;
    "cancelL1ToL2Message(uint256,uint256,uint256[],uint256)": FunctionFragment;
    "configHash()": FunctionFragment;
    "consumeMessageFromL2(uint256,uint256[])": FunctionFragment;
    "deleteMessage(bytes32[])": FunctionFragment;
    "finalize()": FunctionFragment;
    "getMaxL1MsgFee()": FunctionFragment;
    "identify()": FunctionFragment;
    "initialize(bytes)": FunctionFragment;
    "isFinalized()": FunctionFragment;
    "isFrozen()": FunctionFragment;
    "isOperator(address)": FunctionFragment;
    "l1ToL2MessageCancellations(bytes32)": FunctionFragment;
    "l1ToL2MessageNonce()": FunctionFragment;
    "l1ToL2Messages(bytes32)": FunctionFragment;
    "l2ToL1Messages(bytes32)": FunctionFragment;
    "messageCancellationDelay()": FunctionFragment;
    "programHash()": FunctionFragment;
    "registerOperator(address)": FunctionFragment;
    "relayer()": FunctionFragment;
    "sendMessageToL2(uint256,uint256,uint256[])": FunctionFragment;
    "setConfigHash(uint256)": FunctionFragment;
    "setMessageCancellationDelay(uint256)": FunctionFragment;
    "setProgramHash(uint256)": FunctionFragment;
    "setStateBlockNumber(int256)": FunctionFragment;
    "starknetAcceptGovernance()": FunctionFragment;
    "starknetCancelNomination()": FunctionFragment;
    "starknetIsGovernor(address)": FunctionFragment;
    "starknetNominateNewGovernor(address)": FunctionFragment;
    "starknetRemoveGovernor(address)": FunctionFragment;
    "startL1ToL2MessageCancellation(uint256,uint256,uint256[],uint256)": FunctionFragment;
    "stateBlockNumber()": FunctionFragment;
    "stateRoot()": FunctionFragment;
    "unregisterOperator(address)": FunctionFragment;
    "updateState(uint256[],uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addMessage"
      | "cancelL1ToL2Message"
      | "configHash"
      | "consumeMessageFromL2"
      | "deleteMessage"
      | "finalize"
      | "getMaxL1MsgFee"
      | "identify"
      | "initialize"
      | "isFinalized"
      | "isFrozen"
      | "isOperator"
      | "l1ToL2MessageCancellations"
      | "l1ToL2MessageNonce"
      | "l1ToL2Messages"
      | "l2ToL1Messages"
      | "messageCancellationDelay"
      | "programHash"
      | "registerOperator"
      | "relayer"
      | "sendMessageToL2"
      | "setConfigHash"
      | "setMessageCancellationDelay"
      | "setProgramHash"
      | "setStateBlockNumber"
      | "starknetAcceptGovernance"
      | "starknetCancelNomination"
      | "starknetIsGovernor"
      | "starknetNominateNewGovernor"
      | "starknetRemoveGovernor"
      | "startL1ToL2MessageCancellation"
      | "stateBlockNumber"
      | "stateRoot"
      | "unregisterOperator"
      | "updateState"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addMessage",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelL1ToL2Message",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "configHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "consumeMessageFromL2",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteMessage",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(functionFragment: "finalize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMaxL1MsgFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "identify", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isFinalized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isFrozen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "l1ToL2MessageCancellations",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "l1ToL2MessageNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l1ToL2Messages",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "l2ToL1Messages",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "messageCancellationDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "programHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "relayer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sendMessageToL2",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfigHash",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMessageCancellationDelay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProgramHash",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStateBlockNumber",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "starknetAcceptGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "starknetCancelNomination",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "starknetIsGovernor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "starknetNominateNewGovernor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "starknetRemoveGovernor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "startL1ToL2MessageCancellation",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stateBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stateRoot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unregisterOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateState",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "addMessage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelL1ToL2Message",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "configHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "consumeMessageFromL2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMaxL1MsgFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "identify", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isFrozen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "l1ToL2MessageCancellations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1ToL2MessageNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1ToL2Messages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2ToL1Messages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageCancellationDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "programHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "relayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendMessageToL2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConfigHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMessageCancellationDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProgramHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStateBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "starknetAcceptGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "starknetCancelNomination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "starknetIsGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "starknetNominateNewGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "starknetRemoveGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startL1ToL2MessageCancellation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stateRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unregisterOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateState",
    data: BytesLike
  ): Result;

  events: {
    "ConsumedMessageToL1(uint256,address,uint256[])": EventFragment;
    "ConsumedMessageToL2(address,uint256,uint256,uint256[],uint256)": EventFragment;
    "Finalized()": EventFragment;
    "LogMessageToL1(uint256,address,uint256[])": EventFragment;
    "LogMessageToL2(address,uint256,uint256,uint256[],uint256,uint256)": EventFragment;
    "LogNewGovernorAccepted(address)": EventFragment;
    "LogNominatedGovernor(address)": EventFragment;
    "LogNominationCancelled()": EventFragment;
    "LogOperatorAdded(address)": EventFragment;
    "LogOperatorRemoved(address)": EventFragment;
    "LogRemovedGovernor(address)": EventFragment;
    "LogStateTransitionFact(bytes32)": EventFragment;
    "LogStateUpdate(uint256,int256)": EventFragment;
    "MessageToL2Canceled(address,uint256,uint256,uint256[],uint256)": EventFragment;
    "MessageToL2CancellationStarted(address,uint256,uint256,uint256[],uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ConsumedMessageToL1"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConsumedMessageToL2"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Finalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogMessageToL1"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogMessageToL2"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogNewGovernorAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogNominatedGovernor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogNominationCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogOperatorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogOperatorRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRemovedGovernor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogStateTransitionFact"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogStateUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageToL2Canceled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MessageToL2CancellationStarted"
  ): EventFragment;
}

export interface ConsumedMessageToL1EventObject {
  fromAddress: BigNumber;
  toAddress: string;
  payload: BigNumber[];
}
export type ConsumedMessageToL1Event = TypedEvent<
  [BigNumber, string, BigNumber[]],
  ConsumedMessageToL1EventObject
>;

export type ConsumedMessageToL1EventFilter =
  TypedEventFilter<ConsumedMessageToL1Event>;

export interface ConsumedMessageToL2EventObject {
  fromAddress: string;
  toAddress: BigNumber;
  selector: BigNumber;
  payload: BigNumber[];
  nonce: BigNumber;
}
export type ConsumedMessageToL2Event = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber[], BigNumber],
  ConsumedMessageToL2EventObject
>;

export type ConsumedMessageToL2EventFilter =
  TypedEventFilter<ConsumedMessageToL2Event>;

export interface FinalizedEventObject {}
export type FinalizedEvent = TypedEvent<[], FinalizedEventObject>;

export type FinalizedEventFilter = TypedEventFilter<FinalizedEvent>;

export interface LogMessageToL1EventObject {
  fromAddress: BigNumber;
  toAddress: string;
  payload: BigNumber[];
}
export type LogMessageToL1Event = TypedEvent<
  [BigNumber, string, BigNumber[]],
  LogMessageToL1EventObject
>;

export type LogMessageToL1EventFilter = TypedEventFilter<LogMessageToL1Event>;

export interface LogMessageToL2EventObject {
  fromAddress: string;
  toAddress: BigNumber;
  selector: BigNumber;
  payload: BigNumber[];
  nonce: BigNumber;
  fee: BigNumber;
}
export type LogMessageToL2Event = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber[], BigNumber, BigNumber],
  LogMessageToL2EventObject
>;

export type LogMessageToL2EventFilter = TypedEventFilter<LogMessageToL2Event>;

export interface LogNewGovernorAcceptedEventObject {
  acceptedGovernor: string;
}
export type LogNewGovernorAcceptedEvent = TypedEvent<
  [string],
  LogNewGovernorAcceptedEventObject
>;

export type LogNewGovernorAcceptedEventFilter =
  TypedEventFilter<LogNewGovernorAcceptedEvent>;

export interface LogNominatedGovernorEventObject {
  nominatedGovernor: string;
}
export type LogNominatedGovernorEvent = TypedEvent<
  [string],
  LogNominatedGovernorEventObject
>;

export type LogNominatedGovernorEventFilter =
  TypedEventFilter<LogNominatedGovernorEvent>;

export interface LogNominationCancelledEventObject {}
export type LogNominationCancelledEvent = TypedEvent<
  [],
  LogNominationCancelledEventObject
>;

export type LogNominationCancelledEventFilter =
  TypedEventFilter<LogNominationCancelledEvent>;

export interface LogOperatorAddedEventObject {
  operator: string;
}
export type LogOperatorAddedEvent = TypedEvent<
  [string],
  LogOperatorAddedEventObject
>;

export type LogOperatorAddedEventFilter =
  TypedEventFilter<LogOperatorAddedEvent>;

export interface LogOperatorRemovedEventObject {
  operator: string;
}
export type LogOperatorRemovedEvent = TypedEvent<
  [string],
  LogOperatorRemovedEventObject
>;

export type LogOperatorRemovedEventFilter =
  TypedEventFilter<LogOperatorRemovedEvent>;

export interface LogRemovedGovernorEventObject {
  removedGovernor: string;
}
export type LogRemovedGovernorEvent = TypedEvent<
  [string],
  LogRemovedGovernorEventObject
>;

export type LogRemovedGovernorEventFilter =
  TypedEventFilter<LogRemovedGovernorEvent>;

export interface LogStateTransitionFactEventObject {
  stateTransitionFact: string;
}
export type LogStateTransitionFactEvent = TypedEvent<
  [string],
  LogStateTransitionFactEventObject
>;

export type LogStateTransitionFactEventFilter =
  TypedEventFilter<LogStateTransitionFactEvent>;

export interface LogStateUpdateEventObject {
  globalRoot: BigNumber;
  blockNumber: BigNumber;
}
export type LogStateUpdateEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogStateUpdateEventObject
>;

export type LogStateUpdateEventFilter = TypedEventFilter<LogStateUpdateEvent>;

export interface MessageToL2CanceledEventObject {
  fromAddress: string;
  toAddress: BigNumber;
  selector: BigNumber;
  payload: BigNumber[];
  nonce: BigNumber;
}
export type MessageToL2CanceledEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber[], BigNumber],
  MessageToL2CanceledEventObject
>;

export type MessageToL2CanceledEventFilter =
  TypedEventFilter<MessageToL2CanceledEvent>;

export interface MessageToL2CancellationStartedEventObject {
  fromAddress: string;
  toAddress: BigNumber;
  selector: BigNumber;
  payload: BigNumber[];
  nonce: BigNumber;
}
export type MessageToL2CancellationStartedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber[], BigNumber],
  MessageToL2CancellationStartedEventObject
>;

export type MessageToL2CancellationStartedEventFilter =
  TypedEventFilter<MessageToL2CancellationStartedEvent>;

export interface Starknet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StarknetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addMessage(
      msgHashes: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelL1ToL2Message(
      toAddress: PromiseOrValue<BigNumberish>,
      selector: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BigNumberish>[],
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    configHash(overrides?: CallOverrides): Promise<[BigNumber]>;

    consumeMessageFromL2(
      fromAddress: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteMessage(
      msgHashes: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finalize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getMaxL1MsgFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    identify(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isFinalized(overrides?: CallOverrides): Promise<[boolean]>;

    isFrozen(overrides?: CallOverrides): Promise<[boolean]>;

    isOperator(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    l1ToL2MessageCancellations(
      msgHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    l1ToL2MessageNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    l1ToL2Messages(
      msgHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    l2ToL1Messages(
      msgHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    messageCancellationDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    programHash(overrides?: CallOverrides): Promise<[BigNumber]>;

    registerOperator(
      newOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    relayer(overrides?: CallOverrides): Promise<[boolean]>;

    sendMessageToL2(
      toAddress: PromiseOrValue<BigNumberish>,
      selector: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setConfigHash(
      newConfigHash: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMessageCancellationDelay(
      delayInSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProgramHash(
      newProgramHash: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStateBlockNumber(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    starknetAcceptGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    starknetCancelNomination(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    starknetIsGovernor(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    starknetNominateNewGovernor(
      newGovernor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    starknetRemoveGovernor(
      governorForRemoval: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startL1ToL2MessageCancellation(
      toAddress: PromiseOrValue<BigNumberish>,
      selector: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BigNumberish>[],
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stateBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    stateRoot(overrides?: CallOverrides): Promise<[BigNumber]>;

    unregisterOperator(
      removedOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateState(
      programOutput: PromiseOrValue<BigNumberish>[],
      onchainDataHash: PromiseOrValue<BigNumberish>,
      onchainDataSize: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addMessage(
    msgHashes: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelL1ToL2Message(
    toAddress: PromiseOrValue<BigNumberish>,
    selector: PromiseOrValue<BigNumberish>,
    payload: PromiseOrValue<BigNumberish>[],
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  configHash(overrides?: CallOverrides): Promise<BigNumber>;

  consumeMessageFromL2(
    fromAddress: PromiseOrValue<BigNumberish>,
    payload: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteMessage(
    msgHashes: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finalize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getMaxL1MsgFee(overrides?: CallOverrides): Promise<BigNumber>;

  identify(overrides?: CallOverrides): Promise<string>;

  initialize(
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isFinalized(overrides?: CallOverrides): Promise<boolean>;

  isFrozen(overrides?: CallOverrides): Promise<boolean>;

  isOperator(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  l1ToL2MessageCancellations(
    msgHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  l1ToL2MessageNonce(overrides?: CallOverrides): Promise<BigNumber>;

  l1ToL2Messages(
    msgHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  l2ToL1Messages(
    msgHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  messageCancellationDelay(overrides?: CallOverrides): Promise<BigNumber>;

  programHash(overrides?: CallOverrides): Promise<BigNumber>;

  registerOperator(
    newOperator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  relayer(overrides?: CallOverrides): Promise<boolean>;

  sendMessageToL2(
    toAddress: PromiseOrValue<BigNumberish>,
    selector: PromiseOrValue<BigNumberish>,
    payload: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setConfigHash(
    newConfigHash: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMessageCancellationDelay(
    delayInSeconds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProgramHash(
    newProgramHash: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStateBlockNumber(
    _blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  starknetAcceptGovernance(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  starknetCancelNomination(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  starknetIsGovernor(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  starknetNominateNewGovernor(
    newGovernor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  starknetRemoveGovernor(
    governorForRemoval: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startL1ToL2MessageCancellation(
    toAddress: PromiseOrValue<BigNumberish>,
    selector: PromiseOrValue<BigNumberish>,
    payload: PromiseOrValue<BigNumberish>[],
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stateBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  stateRoot(overrides?: CallOverrides): Promise<BigNumber>;

  unregisterOperator(
    removedOperator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateState(
    programOutput: PromiseOrValue<BigNumberish>[],
    onchainDataHash: PromiseOrValue<BigNumberish>,
    onchainDataSize: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addMessage(
      msgHashes: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelL1ToL2Message(
      toAddress: PromiseOrValue<BigNumberish>,
      selector: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BigNumberish>[],
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    configHash(overrides?: CallOverrides): Promise<BigNumber>;

    consumeMessageFromL2(
      fromAddress: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<string>;

    deleteMessage(
      msgHashes: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    finalize(overrides?: CallOverrides): Promise<void>;

    getMaxL1MsgFee(overrides?: CallOverrides): Promise<BigNumber>;

    identify(overrides?: CallOverrides): Promise<string>;

    initialize(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    isFinalized(overrides?: CallOverrides): Promise<boolean>;

    isFrozen(overrides?: CallOverrides): Promise<boolean>;

    isOperator(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    l1ToL2MessageCancellations(
      msgHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l1ToL2MessageNonce(overrides?: CallOverrides): Promise<BigNumber>;

    l1ToL2Messages(
      msgHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2ToL1Messages(
      msgHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messageCancellationDelay(overrides?: CallOverrides): Promise<BigNumber>;

    programHash(overrides?: CallOverrides): Promise<BigNumber>;

    registerOperator(
      newOperator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    relayer(overrides?: CallOverrides): Promise<boolean>;

    sendMessageToL2(
      toAddress: PromiseOrValue<BigNumberish>,
      selector: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    setConfigHash(
      newConfigHash: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMessageCancellationDelay(
      delayInSeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProgramHash(
      newProgramHash: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStateBlockNumber(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    starknetAcceptGovernance(overrides?: CallOverrides): Promise<void>;

    starknetCancelNomination(overrides?: CallOverrides): Promise<void>;

    starknetIsGovernor(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    starknetNominateNewGovernor(
      newGovernor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    starknetRemoveGovernor(
      governorForRemoval: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    startL1ToL2MessageCancellation(
      toAddress: PromiseOrValue<BigNumberish>,
      selector: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BigNumberish>[],
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    stateBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    stateRoot(overrides?: CallOverrides): Promise<BigNumber>;

    unregisterOperator(
      removedOperator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateState(
      programOutput: PromiseOrValue<BigNumberish>[],
      onchainDataHash: PromiseOrValue<BigNumberish>,
      onchainDataSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ConsumedMessageToL1(uint256,address,uint256[])"(
      fromAddress?: PromiseOrValue<BigNumberish> | null,
      toAddress?: PromiseOrValue<string> | null,
      payload?: null
    ): ConsumedMessageToL1EventFilter;
    ConsumedMessageToL1(
      fromAddress?: PromiseOrValue<BigNumberish> | null,
      toAddress?: PromiseOrValue<string> | null,
      payload?: null
    ): ConsumedMessageToL1EventFilter;

    "ConsumedMessageToL2(address,uint256,uint256,uint256[],uint256)"(
      fromAddress?: PromiseOrValue<string> | null,
      toAddress?: PromiseOrValue<BigNumberish> | null,
      selector?: PromiseOrValue<BigNumberish> | null,
      payload?: null,
      nonce?: null
    ): ConsumedMessageToL2EventFilter;
    ConsumedMessageToL2(
      fromAddress?: PromiseOrValue<string> | null,
      toAddress?: PromiseOrValue<BigNumberish> | null,
      selector?: PromiseOrValue<BigNumberish> | null,
      payload?: null,
      nonce?: null
    ): ConsumedMessageToL2EventFilter;

    "Finalized()"(): FinalizedEventFilter;
    Finalized(): FinalizedEventFilter;

    "LogMessageToL1(uint256,address,uint256[])"(
      fromAddress?: PromiseOrValue<BigNumberish> | null,
      toAddress?: PromiseOrValue<string> | null,
      payload?: null
    ): LogMessageToL1EventFilter;
    LogMessageToL1(
      fromAddress?: PromiseOrValue<BigNumberish> | null,
      toAddress?: PromiseOrValue<string> | null,
      payload?: null
    ): LogMessageToL1EventFilter;

    "LogMessageToL2(address,uint256,uint256,uint256[],uint256,uint256)"(
      fromAddress?: PromiseOrValue<string> | null,
      toAddress?: PromiseOrValue<BigNumberish> | null,
      selector?: PromiseOrValue<BigNumberish> | null,
      payload?: null,
      nonce?: null,
      fee?: null
    ): LogMessageToL2EventFilter;
    LogMessageToL2(
      fromAddress?: PromiseOrValue<string> | null,
      toAddress?: PromiseOrValue<BigNumberish> | null,
      selector?: PromiseOrValue<BigNumberish> | null,
      payload?: null,
      nonce?: null,
      fee?: null
    ): LogMessageToL2EventFilter;

    "LogNewGovernorAccepted(address)"(
      acceptedGovernor?: null
    ): LogNewGovernorAcceptedEventFilter;
    LogNewGovernorAccepted(
      acceptedGovernor?: null
    ): LogNewGovernorAcceptedEventFilter;

    "LogNominatedGovernor(address)"(
      nominatedGovernor?: null
    ): LogNominatedGovernorEventFilter;
    LogNominatedGovernor(
      nominatedGovernor?: null
    ): LogNominatedGovernorEventFilter;

    "LogNominationCancelled()"(): LogNominationCancelledEventFilter;
    LogNominationCancelled(): LogNominationCancelledEventFilter;

    "LogOperatorAdded(address)"(operator?: null): LogOperatorAddedEventFilter;
    LogOperatorAdded(operator?: null): LogOperatorAddedEventFilter;

    "LogOperatorRemoved(address)"(
      operator?: null
    ): LogOperatorRemovedEventFilter;
    LogOperatorRemoved(operator?: null): LogOperatorRemovedEventFilter;

    "LogRemovedGovernor(address)"(
      removedGovernor?: null
    ): LogRemovedGovernorEventFilter;
    LogRemovedGovernor(removedGovernor?: null): LogRemovedGovernorEventFilter;

    "LogStateTransitionFact(bytes32)"(
      stateTransitionFact?: null
    ): LogStateTransitionFactEventFilter;
    LogStateTransitionFact(
      stateTransitionFact?: null
    ): LogStateTransitionFactEventFilter;

    "LogStateUpdate(uint256,int256)"(
      globalRoot?: null,
      blockNumber?: null
    ): LogStateUpdateEventFilter;
    LogStateUpdate(
      globalRoot?: null,
      blockNumber?: null
    ): LogStateUpdateEventFilter;

    "MessageToL2Canceled(address,uint256,uint256,uint256[],uint256)"(
      fromAddress?: PromiseOrValue<string> | null,
      toAddress?: PromiseOrValue<BigNumberish> | null,
      selector?: PromiseOrValue<BigNumberish> | null,
      payload?: null,
      nonce?: null
    ): MessageToL2CanceledEventFilter;
    MessageToL2Canceled(
      fromAddress?: PromiseOrValue<string> | null,
      toAddress?: PromiseOrValue<BigNumberish> | null,
      selector?: PromiseOrValue<BigNumberish> | null,
      payload?: null,
      nonce?: null
    ): MessageToL2CanceledEventFilter;

    "MessageToL2CancellationStarted(address,uint256,uint256,uint256[],uint256)"(
      fromAddress?: PromiseOrValue<string> | null,
      toAddress?: PromiseOrValue<BigNumberish> | null,
      selector?: PromiseOrValue<BigNumberish> | null,
      payload?: null,
      nonce?: null
    ): MessageToL2CancellationStartedEventFilter;
    MessageToL2CancellationStarted(
      fromAddress?: PromiseOrValue<string> | null,
      toAddress?: PromiseOrValue<BigNumberish> | null,
      selector?: PromiseOrValue<BigNumberish> | null,
      payload?: null,
      nonce?: null
    ): MessageToL2CancellationStartedEventFilter;
  };

  estimateGas: {
    addMessage(
      msgHashes: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelL1ToL2Message(
      toAddress: PromiseOrValue<BigNumberish>,
      selector: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BigNumberish>[],
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    configHash(overrides?: CallOverrides): Promise<BigNumber>;

    consumeMessageFromL2(
      fromAddress: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteMessage(
      msgHashes: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finalize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getMaxL1MsgFee(overrides?: CallOverrides): Promise<BigNumber>;

    identify(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isFinalized(overrides?: CallOverrides): Promise<BigNumber>;

    isFrozen(overrides?: CallOverrides): Promise<BigNumber>;

    isOperator(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l1ToL2MessageCancellations(
      msgHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l1ToL2MessageNonce(overrides?: CallOverrides): Promise<BigNumber>;

    l1ToL2Messages(
      msgHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2ToL1Messages(
      msgHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messageCancellationDelay(overrides?: CallOverrides): Promise<BigNumber>;

    programHash(overrides?: CallOverrides): Promise<BigNumber>;

    registerOperator(
      newOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    relayer(overrides?: CallOverrides): Promise<BigNumber>;

    sendMessageToL2(
      toAddress: PromiseOrValue<BigNumberish>,
      selector: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setConfigHash(
      newConfigHash: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMessageCancellationDelay(
      delayInSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProgramHash(
      newProgramHash: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStateBlockNumber(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    starknetAcceptGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    starknetCancelNomination(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    starknetIsGovernor(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    starknetNominateNewGovernor(
      newGovernor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    starknetRemoveGovernor(
      governorForRemoval: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startL1ToL2MessageCancellation(
      toAddress: PromiseOrValue<BigNumberish>,
      selector: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BigNumberish>[],
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stateBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    stateRoot(overrides?: CallOverrides): Promise<BigNumber>;

    unregisterOperator(
      removedOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateState(
      programOutput: PromiseOrValue<BigNumberish>[],
      onchainDataHash: PromiseOrValue<BigNumberish>,
      onchainDataSize: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMessage(
      msgHashes: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelL1ToL2Message(
      toAddress: PromiseOrValue<BigNumberish>,
      selector: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BigNumberish>[],
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    configHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    consumeMessageFromL2(
      fromAddress: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteMessage(
      msgHashes: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finalize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getMaxL1MsgFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    identify(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isFinalized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isFrozen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOperator(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l1ToL2MessageCancellations(
      msgHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l1ToL2MessageNonce(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l1ToL2Messages(
      msgHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2ToL1Messages(
      msgHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messageCancellationDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    programHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerOperator(
      newOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    relayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendMessageToL2(
      toAddress: PromiseOrValue<BigNumberish>,
      selector: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setConfigHash(
      newConfigHash: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMessageCancellationDelay(
      delayInSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProgramHash(
      newProgramHash: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStateBlockNumber(
      _blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    starknetAcceptGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    starknetCancelNomination(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    starknetIsGovernor(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    starknetNominateNewGovernor(
      newGovernor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    starknetRemoveGovernor(
      governorForRemoval: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startL1ToL2MessageCancellation(
      toAddress: PromiseOrValue<BigNumberish>,
      selector: PromiseOrValue<BigNumberish>,
      payload: PromiseOrValue<BigNumberish>[],
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stateBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stateRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unregisterOperator(
      removedOperator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateState(
      programOutput: PromiseOrValue<BigNumberish>[],
      onchainDataHash: PromiseOrValue<BigNumberish>,
      onchainDataSize: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
