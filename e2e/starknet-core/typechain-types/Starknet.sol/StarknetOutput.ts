/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface StarknetOutputInterface extends utils.Interface {
  functions: {};

  events: {
    "ConsumedMessageToL2(address,uint256,uint256,uint256[],uint256)": EventFragment;
    "LogMessageToL1(uint256,address,uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ConsumedMessageToL2"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogMessageToL1"): EventFragment;
}

export interface ConsumedMessageToL2EventObject {
  fromAddress: string;
  toAddress: BigNumber;
  selector: BigNumber;
  payload: BigNumber[];
  nonce: BigNumber;
}
export type ConsumedMessageToL2Event = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber[], BigNumber],
  ConsumedMessageToL2EventObject
>;

export type ConsumedMessageToL2EventFilter =
  TypedEventFilter<ConsumedMessageToL2Event>;

export interface LogMessageToL1EventObject {
  fromAddress: BigNumber;
  toAddress: string;
  payload: BigNumber[];
}
export type LogMessageToL1Event = TypedEvent<
  [BigNumber, string, BigNumber[]],
  LogMessageToL1EventObject
>;

export type LogMessageToL1EventFilter = TypedEventFilter<LogMessageToL1Event>;

export interface StarknetOutput extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StarknetOutputInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "ConsumedMessageToL2(address,uint256,uint256,uint256[],uint256)"(
      fromAddress?: PromiseOrValue<string> | null,
      toAddress?: PromiseOrValue<BigNumberish> | null,
      selector?: PromiseOrValue<BigNumberish> | null,
      payload?: null,
      nonce?: null
    ): ConsumedMessageToL2EventFilter;
    ConsumedMessageToL2(
      fromAddress?: PromiseOrValue<string> | null,
      toAddress?: PromiseOrValue<BigNumberish> | null,
      selector?: PromiseOrValue<BigNumberish> | null,
      payload?: null,
      nonce?: null
    ): ConsumedMessageToL2EventFilter;

    "LogMessageToL1(uint256,address,uint256[])"(
      fromAddress?: PromiseOrValue<BigNumberish> | null,
      toAddress?: PromiseOrValue<string> | null,
      payload?: null
    ): LogMessageToL1EventFilter;
    LogMessageToL1(
      fromAddress?: PromiseOrValue<BigNumberish> | null,
      toAddress?: PromiseOrValue<string> | null,
      payload?: null
    ): LogMessageToL1EventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
