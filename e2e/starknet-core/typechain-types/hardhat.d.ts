/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IStarknetCoreProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStarknetCoreProxy__factory>;
    getContractFactory(
      name: "Governance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Governance__factory>;
    getContractFactory(
      name: "GovernedFinalizable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernedFinalizable__factory>;
    getContractFactory(
      name: "Identity",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Identity__factory>;
    getContractFactory(
      name: "IFactRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFactRegistry__factory>;
    getContractFactory(
      name: "IStarknetMessaging",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStarknetMessaging__factory>;
    getContractFactory(
      name: "IStarknetMessagingEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStarknetMessagingEvents__factory>;
    getContractFactory(
      name: "MOperator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MOperator__factory>;
    getContractFactory(
      name: "Operator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Operator__factory>;
    getContractFactory(
      name: "ProxySupport",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxySupport__factory>;
    getContractFactory(
      name: "Starknet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Starknet__factory>;
    getContractFactory(
      name: "StarknetGovernance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StarknetGovernance__factory>;
    getContractFactory(
      name: "StarknetMessaging",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StarknetMessaging__factory>;
    getContractFactory(
      name: "StarknetOperator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StarknetOperator__factory>;
    getContractFactory(
      name: "StarknetOutput",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StarknetOutput__factory>;

    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IStarknetCoreProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStarknetCoreProxy>;
    getContractAt(
      name: "Governance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Governance>;
    getContractAt(
      name: "GovernedFinalizable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernedFinalizable>;
    getContractAt(
      name: "Identity",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Identity>;
    getContractAt(
      name: "IFactRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFactRegistry>;
    getContractAt(
      name: "IStarknetMessaging",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStarknetMessaging>;
    getContractAt(
      name: "IStarknetMessagingEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStarknetMessagingEvents>;
    getContractAt(
      name: "MOperator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MOperator>;
    getContractAt(
      name: "Operator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Operator>;
    getContractAt(
      name: "ProxySupport",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxySupport>;
    getContractAt(
      name: "Starknet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Starknet>;
    getContractAt(
      name: "StarknetGovernance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StarknetGovernance>;
    getContractAt(
      name: "StarknetMessaging",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StarknetMessaging>;
    getContractAt(
      name: "StarknetOperator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StarknetOperator>;
    getContractAt(
      name: "StarknetOutput",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StarknetOutput>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
